scatter.smooth(y_2017, span = .05)
scatter.smooth(y_2017, span = .005, )
scatter.smooth(y_2017, span = .05, )
plot(names(s_2017),
loess.smooth(names(s_2017), y_2017))
plot(names(s_2017),
loess.smooth(names(s_2017), y_2017))
plot(loess.smooth(names(s_2017), y_2017))
loess.smooth(names(s_2017), y_2017)
scatter.smooth(y_2017, span = .05)
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
#summary by stage
s_2019 <- with(climbs_2019, tapply(`disl.(m)`, tappa, sum))
s_2018 <- with(climbs_2018, tapply(disl.m, stage, sum))
s_2017 <- with(climbs_2017, tapply(disl.m, stage, sum))
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
col_2018 <- rgb(105, 147, 45, maxColorValue = 255)
col_2019 <- rgb(85, 130, 169, maxColorValue = 255)
plot(names(s_2017),
s_2017,
type = "l",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n")
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(data.frame(giro2017 = s_2017,
giro2018 = s_2018,
giro2019 = s_2019))
#summary by stage
s_2019 <- with(climbs_2019, tapply(`disl.(m)`, tappa, sum))
s_2018 <- with(climbs_2018, tapply(disl.m, stage, sum))
s_2017 <- with(climbs_2017, tapply(disl.m, stage, sum))
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
col_2018 <- rgb(105, 147, 45, maxColorValue = 255)
col_2019 <- rgb(85, 130, 169, maxColorValue = 255)
plot(names(s_2017),
s_2017,
type = "l",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
font.main = 2)
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(data.frame(giro2017 = s_2017,
giro2018 = s_2018,
giro2019 = s_2019))
?par
#summary by stage
s_2019 <- with(climbs_2019, tapply(`disl.(m)`, tappa, sum))
s_2018 <- with(climbs_2018, tapply(disl.m, stage, sum))
s_2017 <- with(climbs_2017, tapply(disl.m, stage, sum))
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
col_2018 <- rgb(105, 147, 45, maxColorValue = 255)
col_2019 <- rgb(85, 130, 169, maxColorValue = 255)
plot(names(s_2017),
s_2017,
type = "l",
lwd = 2,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(data.frame(giro2017 = s_2017,
giro2018 = s_2018,
giro2019 = s_2019))
#summary by stage
s_2019 <- with(climbs_2019, tapply(`disl.(m)`, tappa, sum))
s_2018 <- with(climbs_2018, tapply(disl.m, stage, sum))
s_2017 <- with(climbs_2017, tapply(disl.m, stage, sum))
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
col_2018 <- rgb(105, 147, 45, maxColorValue = 255)
col_2019 <- rgb(85, 130, 169, maxColorValue = 255)
plot(names(s_2017),
s_2017,
#     type = "l",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(data.frame(giro2017 = s_2017,
giro2018 = s_2018,
giro2019 = s_2019))
#summary by stage
s_2019 <- with(climbs_2019, tapply(`disl.(m)`, tappa, sum))
s_2018 <- with(climbs_2018, tapply(disl.m, stage, sum))
s_2017 <- with(climbs_2017, tapply(disl.m, stage, sum))
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
col_2018 <- rgb(105, 147, 45, maxColorValue = 255)
col_2019 <- rgb(85, 130, 169, maxColorValue = 255)
plot(names(s_2017),
s_2017,
#     type = "l",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
lines(s_2017, lwd = 3, col = col_2017)
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(data.frame(giro2017 = s_2017,
giro2018 = s_2018,
giro2019 = s_2019))
?lines
?par
plot(1:12, type = "b", main = "'fg' : axes, ticks and box in gray",
fg = gray(0.7), bty = "7" , sub = R.version.string)
#summary by stage
s_2019 <- with(climbs_2019, tapply(`disl.(m)`, tappa, sum))
s_2018 <- with(climbs_2018, tapply(disl.m, stage, sum))
s_2017 <- with(climbs_2017, tapply(disl.m, stage, sum))
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
col_2018 <- rgb(105, 147, 45, maxColorValue = 255)
col_2019 <- rgb(85, 130, 169, maxColorValue = 255)
plot(names(s_2017),
s_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(data.frame(giro2017 = s_2017,
giro2018 = s_2018,
giro2019 = s_2019))
plot(names(s_2017),
s_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(data.frame(giro2017 = s_2017,
giro2018 = s_2018,
giro2019 = s_2019))
plot(names(s_2017),
s_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
plot(names(s_2017),
s_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
points(s_2018, pch = 16, col = col_2018, type = "b")
lines(s_2018, lwd = 3, col = col_2018)
lines(s_2019, lwd = 3, col = col_2019)
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
#summary by stage
s_2019 <- with(climbs_2019, tapply(`disl.(m)`, tappa, sum))
s_2018 <- with(climbs_2018, tapply(disl.m, stage, sum))
s_2017 <- with(climbs_2017, tapply(disl.m, stage, sum))
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
col_2018 <- rgb(105, 147, 45, maxColorValue = 255)
col_2019 <- rgb(85, 130, 169, maxColorValue = 255)
plot(names(s_2017),
s_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
points(s_2018, pch = 16, col = col_2018, type = "b")
lines(s_2018, lwd = 3, col = col_2018, type = "b")
points(s_2019, pch = 16, col = col_2019, type = "b")
lines(s_2019, lwd = 3, col = col_2019, type = "b")
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(data.frame(giro2017 = s_2017,
giro2018 = s_2018,
giro2019 = s_2019))
plot(names(s_2017),
s_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
points(s_2018, pch = 16, col = col_2018, type = "b")
lines(s_2018, lwd = 3, col = col_2018, type = "b")
points(s_2019, pch = 16, col = col_2019, type = "b")
lines(s_2019, lwd = 3, col = col_2019, type = "b")
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
plot(names(s_2017),
s_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
points(s_2018, pch = 16, col = col_2018)
lines(s_2018, lwd = 3, col = col_2018, type = "b")
points(s_2019, pch = 16, col = col_2019)
lines(s_2019, lwd = 3, col = col_2019, type = "b")
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
plot(names(s_2017),
s_2017,
type = "S",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
points(s_2018, pch = 16, col = col_2018)
lines(s_2018, lwd = 3, col = col_2018, type = "b")
points(s_2019, pch = 16, col = col_2019)
lines(s_2019, lwd = 3, col = col_2019, type = "b")
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
plot(names(s_2017),
s_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(s_2017,
s_2018,
s_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
lines(s_2018, lwd = 3, pch = 16,col = col_2018, type = "b")
lines(s_2019, lwd = 3, pch = 16, col = col_2019, type = "b")
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
plot(names(s_2017),
cs_2017,
type = "b",
lwd = 3,
col = col_2017,
ylim = c(0, max(c(cs_2017,
cs_2018,
cs_2019))),
main = "Total Elevation Gained in Categorized Climbs By Stages",
ylab = "Total Elevation (m)",
xlab = "Stage",
cex.main = .8,
cex.axis = .8,
cex.lab = .8,
xaxt="n",
pch = 16)
lines(cs_2018, lwd = 3, pch = 16,col = col_2018, type = "b")
lines(cs_2019, lwd = 3, pch = 16, col = col_2019, type = "b")
axis(1, labels = names(s_2017), at = names(s_2017), cex.axis = .8)
legend("topleft",
legend = c("2017", "2018", "2019"),
col = c(col_2017, col_2018, col_2019),
lwd = c(3,3,3),
cex = .8)
DT::datatable(comp, rownames = FALSE)
library(giro2019)
library(DT)
#fill the data with all stages
fill <- data.frame(tappa = 1:21)
climbs_2019 <- merge(fill, climbs, by = "tappa", all.x = TRUE)
fill <- data.frame(stage = 1:21)
climbs_2018 <- merge(fill, climbs_2018, by = "stage", all.x = TRUE)
climbs_2017 <- merge(fill, climbs_2017, by = "stage", all.x = TRUE)
#replace NA
climbs_2019$`disl.(m)` <- ifelse(is.na(climbs_2019$`disl.(m)`), 0, climbs_2019$`disl.(m)`)
climbs_2018$disl.m <- ifelse(is.na(climbs_2018$disl.m), 0, climbs_2018$disl.m)
climbs_2017$disl.m <- ifelse(is.na(climbs_2017$disl.m), 0, climbs_2017$disl.m)
#create colours
col_2017 <- rgb(200, 79, 178, maxColorValue = 255)
col_2018 <- rgb(105, 147, 45, maxColorValue = 255)
col_2019 <- rgb(85, 130, 169, maxColorValue = 255)
comp <- data.frame(Year = factor(c("2017", "2018", "2019")),
Total.elev = c(sum(climbs_2017$disl.m, na.rm = TRUE),
sum(climbs_2018$disl.m, na.rm = TRUE),
sum(climbs_2019$`disl.(m)`, na.rm = TRUE)))
with(comp,barplot(Total.elev,
names.arg = Year,
xlab = "Stage",
ylab = "Total Elevation (m)",
main = "Total Elevation Gained in Categorized Climbs",
cex.axis = .8,
cex.names = .8,
col = c(col_2017, col_2018, col_2019)))
DT::datatable(comp, rownames = FALSE)
sum(climbs_2019$`disl.(m)`, na.rm = TRUE)))
with(comp,barplot(Total.elev,
names.arg = Year,
xlab = "Stage",
ylab = "Total Elevation (m)",
main = "Total Elevation Gained in Categorized Climbs",
cex.axis = .8,
cex.names = .8,
col = c(col_2017, col_2018, col_2019)))
with(comp,barplot(Total.elev,
names.arg = Year,
xlab = "Stage",
ylab = "Total Elevation (m)",
main = "Total Elevation Gained in Categorized Climbs",
cex.axis = .8,
cex.names = .8,
col = c(col_2017, col_2018, col_2019)))
devtools::build_vignettes()
library(giro2019)
rm(list = ls())
devtools::build_vignettes()
devtools::build_vignettes()
devtools::use_vignette("giro2019")
devtools::build_vignettes()
