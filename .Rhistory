}
climbs_full <- do.call(rbind, climbs_l)
par(mfrow = c(19,5), mar = c(2,2,2,2))
x <- lapply(1:nrow(climbs_full), function(i) {
#create data
x <- c(0, climbs_full$`lungh.(km)`[i])
y <- c(0, climbs_full$`disl.(m)`[i])
#if no data plot empty else plot climb
if(is.na(x[2])) {
plot(0,0,type = "n", axes = FALSE,ann = FALSE)
} else {
dat <- giro2019::createhilldata(x = climbs_full$`lungh.(km)`[i],
y = climbs_full$`disl.(m)`[i],
cat = climbs_full$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(climbs_full$`lungh.(km)`),
y_lim = max(climbs_full$`disl.(m)`),
stage = climbs_full$tappa[i],
climb_name = climbs_full$gpm[i],
avg_p = climbs_full$p.med[i],
max_p = climbs_full$p.max[i])
}
})
library(giro2019)
par(mfrow = c(10,4), mar = c(2,2,2,2))
x <- lapply(1:nrow(climbs), function(i) {
dat <- giro2019::createhilldata(x = climbs$`lungh.(km)`[i],
y = climbs$`disl.(m)`[i],
cat = climbs$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(climbs$`lungh.(km)`),
y_lim = max(climbs$`disl.(m)`),
stage = climbs$tappa[i],
climb_name = climbs$gpm[i],
avg_p = climbs$p.med[i],
max_p = climbs$p.max[i])
})
library(giro2019)
par(mfrow = c(1,1))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(giro2019)
x <- lapply(1:nrow(climbs), function(i) {
dat <- giro2019::createhilldata(x = climbs$`lungh.(km)`[i],
y = climbs$`disl.(m)`[i],
cat = climbs$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(climbs$`lungh.(km)`),
y_lim = max(climbs$`disl.(m)`),
stage = climbs$tappa[i],
climb_name = climbs$gpm[i],
avg_p = climbs$p.med[i],
max_p = climbs$p.max[i])
})
library(DT)
head(climbs)
library(giro2019)
library(DT)
datatable(climbs[, c(1,4,5,8,10,11,12,13)])
x <- lapply(1:nrow(climbs), function(i) {
dat <- giro2019::createhilldata(x = climbs$`lungh.(km)`[i],
y = climbs$`disl.(m)`[i],
cat = climbs$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(climbs$`lungh.(km)`),
y_lim = max(climbs$`disl.(m)`),
stage = climbs$tappa[i],
climb_name = climbs$gpm[i],
avg_p = climbs$p.med[i],
max_p = climbs$p.max[i])
})
?par
plot(100, ann = FALSE)
plot(100, axes = FALSE)
plot(100, ann = FALSE)
plot(100, ann = FALSE, xaxt = "n")
plot(100, xaxt = "n")
library(giro2019)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(giro2019)
library(DT)
DT::datatable(climbs[, c(1,4,5,10,11,12,13)])
x <- lapply(1:nrow(climbs), function(i) {
dat <- giro2019::createhilldata(x = climbs$`lungh.(km)`[i],
y = climbs$`disl.(m)`[i],
cat = climbs$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(climbs$`lungh.(km)`),
y_lim = max(climbs$`disl.(m)`),
stage = climbs$tappa[i],
climb_name = climbs$gpm[i],
avg_p = climbs$p.med[i],
max_p = climbs$p.max[i])
})
#pre-process data
climbs_l <- split(climbs,climbs$tappa)
n <- lapply(climbs_l,function(x) nrow(x) + 1)
#creare NA for stages with  < 5 climbs
for(i in 1:length(climbs_l)){
if(n[i] != 6){
for(j in n[[i]]:5){
climbs_l[[i]][j, ] <- NA
}
}
}
climbs_full <- do.call(rbind, climbs_l)
par(mfrow = c(19,5), mar = c(2,2,2,2))
x <- lapply(1:nrow(climbs_full), function(i) {
#create data
x <- c(0, climbs_full$`lungh.(km)`[i])
y <- c(0, climbs_full$`disl.(m)`[i])
#if no data plot empty else plot climb
if(is.na(x[2])) {
plot(0,0,type = "n", axes = FALSE,ann = FALSE)
} else {
dat <- giro2019::createhilldata(x = climbs_full$`lungh.(km)`[i],
y = climbs_full$`disl.(m)`[i],
cat = climbs_full$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(climbs_full$`lungh.(km)`, na.rm = TRUE),
y_lim = max(climbs_full$`disl.(m)`, na.rm = TRUE),
stage = climbs_full$tappa[i],
climb_name = climbs_full$gpm[i],
showaxis = FALSE)
}
})
plot(rnorm(100), axes = FALSE)
plot(rnorm(100))
?axis
Axis(side = 1, labels = FALSE)
Axis(side = 1, labels = FALSE)
plot(rnorm(100))
Axis(side = 1, labels = FALSE)
Axis(side = 2, labels = FALSE, tick = FALSE)
plot(rnorm(100), axis = FALSE)
plot(rnorm(100), axes = FALSE)
Axis(side = 2, labels = FALSE, tick = FALSE)
plot(rnorm(100))
plot(rnorm(100), axes = FALSe)
plot(rnorm(100), axes = FALSE)
plot(rnorm(100), axes = FALSE)
plot(rnorm(100))
library(giro2019)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#pre-process data
climbs_l <- split(climbs,climbs$tappa)
n <- lapply(climbs_l,function(x) nrow(x) + 1)
#creare NA for stages with  < 5 climbs
for(i in 1:length(climbs_l)){
if(n[i] != 6){
for(j in n[[i]]:5){
climbs_l[[i]][j, ] <- NA
}
}
}
climbs_full <- do.call(rbind, climbs_l)
par(mfrow = c(19,5), mar = c(2,2,2,2))
x <- lapply(1:nrow(climbs_full), function(i) {
#create data
x <- c(0, climbs_full$`lungh.(km)`[i])
y <- c(0, climbs_full$`disl.(m)`[i])
#if no data plot empty else plot climb
if(is.na(x[2])) {
plot(0,0,type = "n", axes = FALSE,ann = FALSE)
} else {
dat <- giro2019::createhilldata(x = climbs_full$`lungh.(km)`[i],
y = climbs_full$`disl.(m)`[i],
cat = climbs_full$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(climbs_full$`lungh.(km)`, na.rm = TRUE),
y_lim = max(climbs_full$`disl.(m)`, na.rm = TRUE),
stage = climbs_full$tappa[i],
climb_name = climbs_full$gpm[i],
showaxis = FALSE)
}
})
?aggregate
aggregate(x = climbs$`disl.(m)`,
by = list(climbs$tappa),
FUN = mean)
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
evel_stage
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
elev_stage
str(elev_stage)
barplot(height = elev_stage$`disl.(m)`, names.arg = elev_stage$tappa)
knitr::opts_chunk$set(
fig.width=7,
collapse = TRUE,
comment = "#>"
)
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs")
abline(v)
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs")
abline(v = 5)
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs")
abline(v = 9.5)
abline(v = 15.5)
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs")
abline(v = 9)
abline(v = 15)
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs")
abline(v = 10)
abline(v = 16)
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs")
abline(v = 9.7)
abline(v = 15.7)
head(climbs)
?par
elev_stage <- aggregate(`disl.(m)` ~ cat,
data = climbs,
FUN = sum)
elev_stage
climbs$cat <- ifelse(climbs$cat == "CimaCoppi", "1", climbs$cat)
elev_stage <- aggregate(`disl.(m)` ~ cat,
data = climbs,
FUN = sum)
elev_stage
aggregate(`disl.(m)` ~ cat,
+                         data = climbs,
+                         FUN = length())
aggregate(`disl.(m)` ~ cat,
+                         data = climbs,
+                         FUN = length
aggregate(`disl.(m)` ~ cat, data = climbs, FUN = length)
?subset
i <- 1
dat <- subset(climbs, climbs$cat == i)
dat
dat <- dat[order(dat$`disl.(m)`), ]
dat
climbs$cat <- ifelse(climbs$cat == "CimaCoppi", "1", climbs$cat)
for(i in c(4, 3, 2, 1)){
dat_s <- subset(climbs, climbs$cat == i)
dat_s <- dat_s[order(dat_s$`disl.(m)`), ]
par(mfrow = c(nrow(dat_s)/2,2), mar = c(1,1,2,1))
x <- lapply(1:nrow(climbs), function(i) {
dat <- giro2019::createhilldata(x = dat_s$`lungh.(km)`[i],
y = dat_s$`disl.(m)`[i],
cat = dat_s$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(dat_s$`lungh.(km)`),
y_lim = max(dat_s$`disl.(m)`),
stage = dat_s$tappa[i],
climb_name = dat_s$gpm[i],
avg_p = dat_s$p.med[i],
max_p = dat_s$p.max[i])
})
}
i
climbs$cat <- ifelse(climbs$cat == "CimaCoppi", "1", climbs$cat)
for(j in c(4, 3, 2, 1)){
dat_s <- subset(climbs, climbs$cat == j)
dat_s <- dat_s[order(dat_s$`disl.(m)`), ]
par(mfrow = c(nrow(dat_s)/2,2), mar = c(1,1,2,1))
x <- lapply(1:nrow(climbs), function(i) {
dat <- giro2019::createhilldata(x = dat_s$`lungh.(km)`[i],
y = dat_s$`disl.(m)`[i],
cat = dat_s$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(dat_s$`lungh.(km)`),
y_lim = max(dat_s$`disl.(m)`),
stage = dat_s$tappa[i],
climb_name = dat_s$gpm[i],
avg_p = dat_s$p.med[i],
max_p = dat_s$p.max[i])
})
}
j
i
dat_s <- subset(climbs, climbs$cat == j)
dat_s <- dat_s[order(dat_s$`disl.(m)`), ]
dat_s
climbs$cat <- ifelse(climbs$cat == "CimaCoppi", "1", climbs$cat)
for(j in 1:4){
dat_s <- subset(climbs, climbs$cat == j)
dat_s <- dat_s[order(dat_s$`disl.(m)`), ]
par(mfrow = c(nrow(dat_s)/2,2), mar = c(1,1,2,1))
x <- lapply(1:nrow(climbs), function(i) {
dat <- giro2019::createhilldata(x = dat_s$`lungh.(km)`[i],
y = dat_s$`disl.(m)`[i],
cat = dat_s$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(dat_s$`lungh.(km)`),
y_lim = max(dat_s$`disl.(m)`),
stage = dat_s$tappa[i],
climb_name = dat_s$gpm[i],
avg_p = dat_s$p.med[i],
max_p = dat_s$p.max[i])
})
}
j
climbs$cat <- ifelse(climbs$cat == "CimaCoppi", "1", climbs$cat)
for(j in 1:4){
dat_s <- subset(climbs, climbs$cat == j)
dat_s <- dat_s[order(dat_s$`disl.(m)`), ]
par(mfrow = c(nrow(dat_s)/2,2), mar = c(1,1,2,1))
x <- lapply(1:nrow(dat_s), function(i) {
dat <- giro2019::createhilldata(x = dat_s$`lungh.(km)`[i],
y = dat_s$`disl.(m)`[i],
cat = dat_s$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(dat_s$`lungh.(km)`),
y_lim = max(dat_s$`disl.(m)`),
stage = dat_s$tappa[i],
climb_name = dat_s$gpm[i],
avg_p = dat_s$p.med[i],
max_p = dat_s$p.max[i])
})
}
climbs$cat <- ifelse(climbs$cat == "CimaCoppi", "1", climbs$cat)
for(j in 1:4){
dat_s <- subset(climbs, climbs$cat == j)
dat_s <- dat_s[order(dat_s$`disl.(m)`), ]
par(mfrow = c(nrow(dat_s)/2,2), mar = c(1,1,2,1))
x <- lapply(1:nrow(dat_s), function(i) {
dat <- giro2019::createhilldata(x = dat_s$`lungh.(km)`[i],
y = dat_s$`disl.(m)`[i],
cat = dat_s$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(dat_s$`lungh.(km)`),
y_lim = max(dat_s$`disl.(m)`),
stage = dat_s$tappa[i],
climb_name = dat_s$gpm[i],
avg_p = dat_s$p.med[i],
max_p = dat_s$p.max[i])
})
}
j <- 1
dat_s <- subset(climbs, climbs$cat == j)
dat_s <- dat_s[order(dat_s$`disl.(m)`), ]
nrow(dat_s)/2
?par
?datatable
nrow(climbs)
climbs <- climbs[order(climbs$`disl.(m)`), ]
par(mfrow = c(20,2), mar = c(2,1,2,1))
x <- lapply(1:nrow(dat_s), function(i) {
dat <- giro2019::createhilldata(x = dat_s$`lungh.(km)`[i],
y = dat_s$`disl.(m)`[i],
cat = dat_s$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(dat_s$`lungh.(km)`),
y_lim = max(dat_s$`disl.(m)`),
stage = dat_s$tappa[i],
climb_name = dat_s$gpm[i],
avg_p = dat_s$p.med[i],
max_p = dat_s$p.max[i],
showaxis = FALSE)
})
climbs <- climbs[order(climbs$`disl.(m)`), ]
par(mfrow = c(20,2), mar = c(2,1,2,1))
x <- lapply(1:nrow(climbs), function(i) {
dat <- giro2019::createhilldata(x = climbs$`lungh.(km)`[i],
y = climbs$`disl.(m)`[i],
cat = climbs$cat[i])
giro2019::hillplot(x = dat$x,
y = dat$y,
col_plot = dat$plot_col,
x_lim = max(climbs$`lungh.(km)`),
y_lim = max(climbs$`disl.(m)`),
stage = climbs$tappa[i],
climb_name = climbs$gpm[i],
avg_p = climbs$p.med[i],
max_p = climbs$p.max[i],
showaxis = FALSE)
})
nrow(climbs)
devtools::build_vignettes()
devtools::check()
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs")
abline(v = 9.7)
abline(v = 15.7)
DT::datatable(elev_stage,
rownames = FALSE,
options = list(pageLength = 10))
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs",
cex.axis = .8)
abline(v = 9.7)
abline(v = 15.7)
DT::datatable(elev_stage,
rownames = FALSE,
options = list(pageLength = 10))
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs",
cex.axis = .5)
abline(v = 9.7)
abline(v = 15.7)
DT::datatable(elev_stage,
rownames = FALSE,
options = list(pageLength = 10))
elev_stage <- aggregate(`disl.(m)` ~ tappa,
data = climbs,
FUN = sum)
barplot(height = elev_stage$`disl.(m)`,
names.arg = elev_stage$tappa,
xlab = "Stage",
ylab = "Total Elevation",
main = "Total Elevation Gained in Categorized Climbs",
cex.axis = .8,
cex.names = .8)
abline(v = 9.7)
abline(v = 15.7)
DT::datatable(elev_stage,
rownames = FALSE,
options = list(pageLength = 10))
devtools::build_vignettes()
library(giro2019)
rm(list = ls())
library(giro2019)
devtools::check()
devtools::build_vignettes()
